/**
 * Definition for an interval.
 * public class Interval {
 * int start;
 * int end;
 * Interval() { start = 0; end = 0; }
 * Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        if (intervals.size() == 0) {
            ArrayList<Interval> answer = new ArrayList<>();
            answer.add(newInterval);
            return answer;
        }
        Deque<Interval> queue = new ArrayDeque<>();
        queue.addLast(newInterval);
        for (int i = 0; i < intervals.size(); i++) {
            if (checkInteraction(queue.peekLast(), intervals.get(i))) {
                queue.addLast(mergeInterval(queue.pollLast(), intervals.get(i)));
            } else {
                if (intervals.get(i).end < queue.peekLast().start) {
                    Interval temp = queue.pollLast();
                    queue.addLast(intervals.get(i));
                    queue.addLast(temp);
                } else {
                    queue.addLast(intervals.get(i));
                }
            }
        }
        ArrayList<Interval> answer = new ArrayList<>();
        answer.addAll(queue);
        return answer;
    }

    private boolean checkInteraction(Interval A, Interval B) {
        if (A.end < B.start || B.end < A.start) {
            return false;
        }
        return true;
    }

    private Interval mergeInterval(Interval A, Interval B) {
        return new Interval(Math.min(A.start, B.start), Math.max(A.end, B.end));
    }
}
