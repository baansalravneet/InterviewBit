/**
 * Definition for an interval.
 * public class Interval {
 * int start;
 * int end;
 * Interval() { start = 0; end = 0; }
 * Interval(int s, int e) { start = s; end = e; }
 * }
 */

public class Solution {

    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        Collections.sort(intervals, new MyComparator());
        ArrayList<Interval> answer = new ArrayList<>();
        Interval currentInterval = intervals.get(0);
        for (int i = 0; i < intervals.size(); i++) {
            Interval thisInterval = intervals.get(i);
            if (currentInterval.end < thisInterval.start) {
                answer.add(currentInterval);
                currentInterval = thisInterval;
                continue;
            }
            if (currentInterval.end >= thisInterval.start) {
                Interval newInterval = new Interval(currentInterval.start, Math.max(thisInterval.end, currentInterval.end));
                currentInterval = newInterval;
                continue;
            }
        }
        answer.add(currentInterval);
        return answer;
    }

    class MyComparator implements Comparator<Interval> {
        public int compare(Interval a, Interval b) {
            return a.start - b.start;
        }
    }
}
