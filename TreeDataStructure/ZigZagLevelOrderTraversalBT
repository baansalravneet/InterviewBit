/**
 * Definition for binary tree
 * class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) {
 * val = x;
 * left=null;
 * right=null;
 * }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode A) {
        Deque<TreeNode> queue = new ArrayDeque<>();
        Deque<TreeNode> stack = new ArrayDeque<>();
        boolean useQueue = true;
        queue.add(A);
        ArrayList<ArrayList<Integer>> answer = new ArrayList<>();
        while (!queue.isEmpty() || !stack.isEmpty()) {
            ArrayList<Integer> current = new ArrayList<>();
            if (useQueue) {
                while (!queue.isEmpty()) {
                    TreeNode currentNode = queue.pollLast();
                    current.add(currentNode.val);
                    if (currentNode.left != null) {
                        stack.addFirst(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        stack.addFirst(currentNode.right);
                    }
                }
                answer.add(current);
                useQueue = false;
            } else {
                while (!stack.isEmpty()) {
                    TreeNode currentNode = stack.pollFirst();
                    current.add(currentNode.val);
                    if (currentNode.right != null) {
                        queue.addLast(currentNode.right);
                    }
                    if (currentNode.left != null) {
                        queue.addLast(currentNode.left);
                    }
                }
                answer.add(current);
                useQueue = true;
            }
        }
        return answer;
    }
}
