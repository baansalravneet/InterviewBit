/**
 * Definition for binary tree
 * class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) {
 * val = x;
 * left=null;
 * right=null;
 * }
 * }
 */
public class Solution {
    public ArrayList<Integer> recoverTree(TreeNode A) {
        List<Integer> inOrder = new ArrayList<>();
        populate(inOrder, A);
        int firstIndex = 0;
        for (int i = 1; i < inOrder.size(); i++) {
            if (inOrder.get(i) < inOrder.get(i - 1)) {
                firstIndex = i;
            }
        }
        int secondIndex = inOrder.size() - 1;
        for (int i = inOrder.size() - 2; i >= 0; i--) {
            if (inOrder.get(i) > inOrder.get(i + 1)) {
                secondIndex = i;
            }
        }
        ArrayList<Integer> answer = new ArrayList<>();
        answer.add(inOrder.get(firstIndex));
        answer.add(inOrder.get(secondIndex));
        return answer;
    }

    private void populate(List<Integer> inOrder, TreeNode A) {
        if (A == null) {
            return;
        }
        populate(inOrder, A.left);
        inOrder.add(A.val);
        populate(inOrder, A.right);
    }
}
