/**
 * Definition for binary tree
 * class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) {
 * val = x;
 * left=null;
 * right=null;
 * }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode A) {
        ArrayList<ArrayList<Integer>> answer = new ArrayList<>();
        if (A == null) {
            return answer;
        }
        Map<TreeNode, Integer> map = new LinkedHashMap<>();
        ArrayList<TreeNode> currentLevel = new ArrayList<>();
        currentLevel.add(A);
        map.put(A, 0);
        while (!currentLevel.isEmpty()) {
            ArrayList<TreeNode> nextLevel = new ArrayList<>();
            for (TreeNode node : currentLevel) {
                if (node.left != null) {
                    map.put(node.left, map.get(node) - 1);
                    nextLevel.add(node.left);
                }
                if (node.right != null) {
                    map.put(node.right, map.get(node) + 1);
                    nextLevel.add(node.right);
                }
            }
            currentLevel = nextLevel;
        }
        int smallestValue = Integer.MAX_VALUE;
        int largestValue = Integer.MIN_VALUE;
        for (Map.Entry<TreeNode, Integer> entry : map.entrySet()) {
            smallestValue = Math.min(smallestValue, entry.getValue());
            largestValue = Math.max(largestValue, entry.getValue());
        }
        for (int i = 0; i < largestValue - smallestValue + 1; i++) {
            answer.add(new ArrayList<Integer>());
        }
        for (Map.Entry<TreeNode, Integer> entry : map.entrySet()) {
            answer.get(entry.getValue() - smallestValue).add(entry.getKey().val);
        }
        return answer;
    }
}
