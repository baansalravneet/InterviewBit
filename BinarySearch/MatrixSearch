public class Solution {
    public int searchMatrix(ArrayList<ArrayList<Integer>> A, int B) {
        int possibleRow = getPossibleRow(A, B);
        if (possibleRow == -1) {
            return 0;
        }
        return checkIfPresent(A.get(possibleRow), B);
    }

    private int getPossibleRow(ArrayList<ArrayList<Integer>> A, int B) {
        int answer = -1;
        int left = 0;
        int right = A.size() - 1;
        while (left <= right) {
            int mid = (left + right);
            if (A.get(mid).get(A.get(mid).size() - 1) >= B) {
                answer = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return answer;
    }

    private int checkIfPresent(ArrayList<Integer> A, int B) {
        int answer = 0;
        int left = 0;
        int right = A.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (A.get(mid) < B) {
                left = mid + 1;
            } else if (A.get(mid) > B) {
                right = mid - 1;
            } else {
                return 1;
            }
        }
        return 0;
    }
}
