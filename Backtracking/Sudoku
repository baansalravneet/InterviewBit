public class Solution {
    public void solveSudoku(ArrayList<ArrayList<Character>> a) {
        recursionHelper(a, 0, 0);
    }

    private boolean recursionHelper(ArrayList<ArrayList<Character>> a, int i, int j) {
        if (j == 9) {
            return recursionHelper(a, i + 1, 0);
        }
        if (i == 9) {
            return true;
        }
        if (a.get(i).get(j) != '.') {
            return recursionHelper(a, i, j + 1);
        }
        for (int number = 1; number <= 9; number++) {
            if (validInsert(a, number, i, j)) {
                a.get(i).set(j, Integer.toString(number).charAt(0));
                boolean answer = recursionHelper(a, i, j + 1);
                if (answer) {
                    return true;
                }
                a.get(i).set(j, '.');
            }
        }
        return false;
    }

    private boolean validInsert(ArrayList<ArrayList<Character>> a, int number, int i, int j) {
        return validColumn(a, number, j) && validRow(a, number, i) && validBox(a, number, i, j);
    }

    private boolean validColumn(ArrayList<ArrayList<Character>> a, int number, int j) {
        Set<Character> values = new HashSet<>();
        values.add(Integer.toString(number).charAt(0));
        for (int row = 0; row < 9; row++) {
            if (a.get(row).get(j) != '.') {
                if (values.contains(a.get(row).get(j))) {
                    return false;
                }
                values.add(a.get(row).get(j));
            }
        }
        return true;
    }

    private boolean validRow(ArrayList<ArrayList<Character>> a, int number, int i) {
        Set<Character> values = new HashSet<>();
        values.add(Integer.toString(number).charAt(0));
        for (int column = 0; column < 9; column++) {
            if (a.get(i).get(column) != '.') {
                if (values.contains(a.get(i).get(column))) {
                    return false;
                }
                values.add(a.get(i).get(column));
            }
        }
        return true;
    }

    private boolean validBox(ArrayList<ArrayList<Character>> a, int number, int i, int j) {
        Set<Character> values = new HashSet<>();
        values.add(Integer.toString(number).charAt(0));
        for (int row = (i / 3) * 3; row < (i / 3) * 3 + 3; row++) {
            for (int column = (j / 3) * 3; column < (j / 3) * 3 + 3; column++) {
                if (a.get(row).get(column) != '.') {
                    if (values.contains(a.get(row).get(column))) {
                        return false;
                    }
                    values.add(a.get(row).get(column));
                }
            }
        }
        return true;
    }
}
