public class Solution {
    public ArrayList<ArrayList<String>> partition(String a) {
        ArrayList<ArrayList<String>> answer = new ArrayList<>();
        recursionHelper(answer, a, 0, new ArrayList<>());
        return answer;
    }

    private void recursionHelper(ArrayList<ArrayList<String>> answer,
                                 String a,
                                 int index,
                                 ArrayList<String> current) {
        if (index >= a.length()) {
            answer.add(new ArrayList<>(current));
        }
        for (int i = index + 1; i <= a.length(); i++) {
            if (isPalindrome(a.substring(index, i))) {
                current.add(a.substring(index, i));
                recursionHelper(answer, a, i, current);
                current.remove(current.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
